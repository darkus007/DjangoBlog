"""
Django settings for website project.

Generated by 'django-admin startproject' using Django 4.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from os import getenv, path
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['127.0.0.1', 'localhost']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'ckeditor',

    "debug_toolbar",  # django-debug-toolbar
    "captcha",

    'blog.apps.BlogConfig',
    'members.apps.MembersConfig',

    'rest_framework',   # обрабатывает лишь запросы, пришедшие с того же домена, на котором располагается веб-служба
    'corsheaders',      # доп библиотека, для обработки запросов с других доменов
    'api.apps.ApiConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',    # обязательно добавляем перед CommonMiddleware (ниже)
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    "debug_toolbar.middleware.DebugToolbarMiddleware",  # django-debug-toolbar

    'website.middleware.MiddlewareAllException',     # обработка исключений
]

ROOT_URLCONF = 'website.urls'

# изменены настройки TEMPLATES, в такой конфигурации Django сначала ищет шаблоны
# password_reset_....html в папке 'members/templates/', затем в самом Django
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'APP_DIRS': True,
        'DIRS': ['members/templates/', ],
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'website.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'ru'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

INTERNAL_IPS = [  # django-debug-toolbar
    "127.0.0.1",
]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'
# добавляем для построения пути к статическим файлам (картинки в профайле)
STATIC_ROOT = path.join(BASE_DIR, 'static')
STATICFILES_DIRS = ['media/']

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Настраиваем переадресацию после регистрации и выхода пользователя
LOGIN_REDIRECT_URL = 'home'
LOGOUT_REDIRECT_URL = 'home'

# добавляем для указания пути сохранения изображений модели members.models.Profile
MEDIA_ROOT = path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

# Настройка проекта
PAGINATE_BY_CONST = 25
ALL_CATEGORIES = {'title': 'Все категории', 'slug': 'all-categories'}
EMAIL_THEME_CHOICES = (
    ('Общее', 'Общее'),
    ('Добавить категорию', 'Добавить категорию'),
    ('Предложение по улучшению сайта', 'Предложение по улучшению сайта'),
    ('Ошибка на сайте', 'Ошибка на сайте'),
)

# Настраиваем кэширование
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'TIMEOUT': 300,  # время хранения кэша (300 секунд (5 минут) - по умолчанию)
        'OPTIONS': {
            'MAX_ENTRIES': 300,  # количество записей кэша (300 - по умолчанию)
            'CULL_FREQUENCY': 2,  # часть кэша, которая будет очищена (0 - весь кэш, 2 - половина, 3 - треть ...)
        }
    }
}

# настраиваем отправку писем
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'  # выводит в командной строке
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'  # отправляет на почтовый сервер
DEFAULT_FROM_EMAIL = 'blog@mail.ru'  # адрес отправителя по умолчанию
EMAIL_HOST = 'localhost'  # адрес SMTP-сервера, 'localhost' - по умолчанию
EMAIL_PORT = 1025  # порт SMTP-сервера
# EMAIL_HOST_USER = 'user'                                         # логин для SMTP-сервера, по умолчанию пустая строка
# EMAIL_HOST_PASSWORD = 'password'                                 # пароль для SMTP-сервера, по умолчанию пустая строка
ADMINS = [  # админы, которым будут отправлены письма методом mail_admins
    ('admin', 'admin@mail.ru'),
]
SERVER_EMAIL = 'from@email.ru'  # адрес почты с которой будут отправлены письма

# настраиваем логирование
LOGGING = {
    'version': 1,
    'disable_existing_logger': True,    # отключаем все регистраторы, используемые по умолчанию

    'filters': {
        'require_debug_false': {
            # выводит сообщения только в том случае, если отключен отладочный режим (DEBUG = False)
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            # выводит сообщения только в том случае, если выключен отладочный режим (DEBUG = True)
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },

    'formatters': {
        'simple': {
            'format': '[%(asctime)s] %(levelname)s: %(message)s',   # формат сообщения
            'datefmt': '%Y.%m.%d %H:%M:%S',                         # формат временной метки
        }
    },

    'handlers': {
        'console_dev': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
            'filters': ['require_debug_true'],
        },
        'console_prod': {
            'level': 'WARNING',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
            'filters': ['require_debug_false'],
        },
        'file': {
            'level': 'WARNING',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': 'logs/website.log',
            'maxBytes': 1048576,
            'backupCount': 10,
            'formatter': 'simple',
            'filters': ['require_debug_false'],
        },
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'filters': ['require_debug_false']
        }
    },

    'loggers': {
        'django': {                 # собирает сообщения от всех подсистем фреймворка
            'level': 'INFO',
            'handlers': ['console_dev', 'console_prod'],
        },
        'django.server': {          # собирает сообщения от подсистемы обработки запросов и формирования ответов
            'level': 'WARNING',
            'handlers': ['file'],
            'propagate': True,
        },
        # 'django.db.backends': {      # собирает сообщения обо всех операциях с базой данных сайта
        #     'handlers': ['console_dev'],
        #     'level': 'DEBUG',       # DEBUG - по умолчанию
        # }

        # добавлен регистратора, который объявлен в файле website/middleware.py
        # logger = logging.getLogger(__name__), ult __name__ = 'website.middleware'
        'website.middleware': {
            'level': 'WARNING',
            'handlers': ['file', 'console_dev', 'mail_admins'],   # В файл пишет когда DEBUG = True,
            'propagate': False,
        },
    }
}

# настройка ckeditor
CKEDITOR_CONFIGS = {
    'default': {
        # 'toolbar': 'full',
        'height': 400,
        'width': 'full',    # работает при добавлении CSS стилей
    },
}
